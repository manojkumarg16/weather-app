{"version":3,"sources":["components/dashboard/dashboard.js","App.js","serviceWorker.js","index.js"],"names":["REACT_APP_API_KEY","process","Dashboard","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getWeather","city","setState","isLoading","request","get","url","concat","error","response","body","console","log","JSON","parse","weather","list","showWeatherCard","detail","index","react_default","a","createElement","className","key","src","icon","alt","moment","dt_txt","format","description","main","pressure","temp","humidity","onChange","e","target","value","state","_this2","_this$state","id","type","name","placeholder","onClick","length","map","data","Component","App","dashboard_Dashboard","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d5762938.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport request from \"request\";\r\nimport moment from \"moment\";\r\nimport \"./dashboard.css\";\r\nconst { REACT_APP_API_KEY } = process.env;\r\n\r\nexport default class Dashboard extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isLoading: false,\r\n      city: \"london\",\r\n      weather: []\r\n    };\r\n  }\r\n  getWeather = city => {\r\n    this.setState({ isLoading: true });\r\n    request.get(\r\n      {\r\n        url: `https://vast-ridge-59743.herokuapp.com/getWeather?city=${city}&appid=${REACT_APP_API_KEY}`\r\n      },\r\n      (error, response, body) => {\r\n        console.log(error, response, body);\r\n        console.log(JSON.parse(body));\r\n        this.setState({ isLoading: false, weather: JSON.parse(body).list });\r\n      }\r\n    );\r\n  };\r\n  showWeatherCard = (detail, index) => {\r\n    return (\r\n      <div className=\"card\" key={index}>\r\n        <img\r\n          className=\"card-img-top\"\r\n          src={`http://openweathermap.org/img/w/${detail.weather[0].icon}.png`}\r\n          alt=\"Weather status\"\r\n        />\r\n        <div className=\"card-body\">\r\n          <h5 className=\"card-title\">\r\n            {moment(detail.dt_txt, \"YYYY-MM-DD hh:mm:ss\").format(\"MMM Do YYYY\")}\r\n          </h5>\r\n          <p className=\"card-text\">{detail.weather[0].description}</p>\r\n        </div>\r\n        <ul className=\"list-group list-group-flush\">\r\n          <li className=\"list-group-item\">\r\n            <b>Pressure:</b> {detail.main.pressure}\r\n          </li>\r\n          <li className=\"list-group-item\">\r\n            <b>Temprature:</b> {detail.main.temp}\r\n          </li>\r\n          <li className=\"list-group-item\">\r\n            <b>Humidity:</b> {detail.main.humidity}\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    );\r\n  };\r\n  onChange = e => {\r\n    this.setState({ city: e.target.value });\r\n  };\r\n  render() {\r\n    const { weather, city, isLoading } = this.state;\r\n    return (\r\n      <div>\r\n        <div className=\"content\">\r\n          <h3>Weather Forecast</h3>\r\n          <div className=\"section\" id=\"section\">\r\n            <div className=\"row\" id=\"row\">\r\n              <input\r\n                type=\"text\"\r\n                name=\"city\"\r\n                className=\"class\"\r\n                placeholder=\"Search here..\"\r\n                id=\"word\"\r\n                onChange={this.onChange}\r\n              />\r\n              <button\r\n                className=\"btn btn-primary btn-lg\"\r\n                onClick={() => this.getWeather(city)}\r\n              >\r\n                Search\r\n              </button>\r\n            </div>\r\n          </div>\r\n          {!isLoading ? (\r\n            weather.length ? (\r\n              weather.map((data, index) => {\r\n                return this.showWeatherCard(data, index);\r\n              })\r\n            ) : (\r\n              <h1>No weather</h1>\r\n            )\r\n          ) : (\r\n            <h1>Loading</h1>\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\nimport Dashboard from \"./components/dashboard/dashboard\";\nclass App extends Component {\n  render() {\n    return <Dashboard />;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}